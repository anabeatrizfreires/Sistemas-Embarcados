Para todas as questões, utilize as funções da biblioteca stdio.h de leitura e de escrita em arquivo (fopen(), fclose(), fwrite(), fread(), dentre outras). Compile os códigos com o gcc e execute-os via terminal.

1. Crie um código em C para escrever "Ola mundo!" em um arquivo chamado 'ola_mundo.txt'.
$gedit
    #include <stdio.h>
    
     int main (int argc, const char * argv [])
     {
             printf ("Ola mundo!\ n"); 
             return 0;
     }
salva com ctrl+s, nomeia como 'ola_mundo.txt'
$gcc ola_mundo.c -o teste
$./teste
terminal: Ola mundo!

2. Crie um código em C que pergunta ao usuário seu nome e sua idade, e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':

$ ./ola_usuario_1
$ Digite o seu nome: Eu
$ Digite a sua idade: 30
$ cat Eu.txt
$ Nome: Eu
$ Idade: 30 anos

$gedit 
    #include <stdio.h>
    #include <stdlib.h>

    nome do caractere [20];
    
    int main (int argc, const char * argv [])
    {
        printf ("Digite seu nome:");
        scanf ("% s", nome);
        printf ("Digite a sua idade:");
        scanf ("% d", idade);
        printf ("Nome:% s \ n", nome);
        printf ("Idade:% d \ n", idade);
        return 0;
    }
salva com ctrl+s, nomeia como 'ola_usuario_1.txt'
$gcc ola_usuario_1.c -o teste
$./teste
terminal: Nome: nome
	  Idade: idade

3. Crie um código em C que recebe o nome do usuário e e sua idade como argumentos de entrada (usando as variáveis argc e *argv[]), e escreve este conteúdo em um arquivo com o seu nome e extensão '.txt'. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
$gedit 
    #include <stdio.h>
    #include <stdlib.h>

    nome do caractere [20];
    nome do caractere2 [20];
    
    int main (int argc, const char * argv [])
    {
        printf ("Digite seu nome:");
        scanf ("% s % s", nome1 nome2);
        printf ("Digite a sua idade:");
        scanf ("% d", idade);
        printf ("Nome:% s \ n", nome2);
        printf ("Idade:% d \ n", idade);
        return 0;
    }
salva com ctrl+s, nomeia como 'ola_usuario_2.txt'
$gcc ola_usuario_2.c -o teste
$./teste
terminal: Nome: nome2
	  Idade: idade

4. Crie uma função que retorna o tamanho de um arquivo, usando o seguinte protótipo: int tam_arq_texto(char *nome_arquivo); Salve esta função em um arquivo separado chamado 'bib_arqs.c'. Salve o protótipo em um arquivo chamado 'bib_arqs.h'. Compile 'bib_arqs.c' para gerar o objeto 'bib_arqs.o'.

# include  < stdio.h >
# include  < stdlib.h >
# include  < string.h >
# include  " bib_arqs.h "

long  tam_arq_texto ( char * nome_arquivo)
{
ARQUIVO * fp = fopen (nome_arquivo,"r");
tamanho longo = 0 ;
if (fp! = NULL) {
fseek (fp, 0 , SEEK_END);
tamanho = ftell (fp);
fseek (fp, 0 , SEEK_SET);
fclose (fp);
}
mais {
printf ("Arquivo inexistente\n");
}
return tamanho;
}

void  le_arq_texto ( char * nome_arquivo, char * conteudo)
{
tam longo = 0 ;
ARQUIVO * fp = fopen (nome_arquivo, " r " );
tam = tam_arq_texto (nome_arquivo);
conteudo = ( char *) malloc (tam * ( sizeof ( char )));
fgets (conteudo, sizeof ( char ) * tam, fp);
puts (conteudo);
fclose (fp);
livre (conteudo);
}

5. Crie uma função que lê o conteúdo de um arquivo-texto e o guarda em uma string, usando o seguinte protótipo: char* le_arq_texto(char *nome_arquivo); Repare que o conteúdo do arquivo é armazenado em um vetor interno à função, e o endereço do vetor é retornado ao final. (Se você alocar este vetor dinamicamente, lembre-se de liberar a memória dele quando acabar o seu uso.) Salve esta função no mesmo arquivo da questão 4, chamado 'bib_arqs.c'. Salve o protótipo no arquivo 'bib_arqs.h'. Compile 'bib_arqs.c' novamente para gerar o objeto 'bib_arqs.o'.

6. Crie um código em C que copia a funcionalidade básica do comando cat: escrever o conteúdo de um arquivo-texto no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'cat_falsificado':

$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
$ ./cat_falsificado ola.txt
$ Ola mundo cruel! Ola universo ingrato!

# include  < stdio.h >
# include  < stdlib.h >
# include  " bib_arqs.h "

int  main ( int argc, char * argv []) {

char * tala;
le_arq_texto (argv [ 1 ], tala);
}

7. Crie um código em C que conta a ocorrência de uma palavra-chave em um arquivo-texto, e escreve o resultado no terminal. Reaproveite as funções já criadas nas questões anteriores. Por exemplo, considerando que o código criado recebeu o nome de 'busca_e_conta':
$ echo Ola mundo cruel! Ola universo ingrato! > ola.txt
$ ./busca_e_conta Ola ola.txt
$ 'Ola' ocorre 2 vezes no arquivo 'ola.txt'.

# include  < stdio.h >
# include  < stdlib.h >
# include  < string.h >

int  main ( int argc, char  const * argv [])
{   
int n = 0 ;
caractere cadeia [ 30 ];
ARQUIVO * fp = fopen (argv [ 2 ], " r " );
if (fp == NULL )
{
    printf ( " Não foi possível acessar o arquivo \ n " );
    saída (- 1 );
}

while (! feof (fp)) // este laço pesquisa a palavra atual
{
    fscanf (fp, " % s " , string);
    if ( strcmp (string, argv [ 1 ]) == 0 ) // se a correspondência for encontrada incremento num
    n ++;
}
printf ( " ' % s ' ocorre % d vezes no arquivo ' % s ' \ n " , argv [ 1 ], n, argv [ 2 ]);
return  0 ;
}